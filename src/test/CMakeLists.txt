# A CMake file for building tests
cmake_minimum_required (VERSION 2.8.3)
set(CMAKE_LEGACY_CYGWIN_WIN32 0) # Remove when CMake >= 2.8.4 is required

set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

#######################################
# cleanflight-tests
#######################################
project(cleanflight-tests)

# Prevent in-source builds
string(COMPARE EQUAL "${PROJECT_SOURCE_DIR}" "${PROJECT_BINARY_DIR}" isInSourceBuild)
if(isInSourceBuild)
    file(REMOVE_RECURSE ${CMAKE_SOURCE_DIR}/CMakeFiles ${CMAKE_SOURCE_DIR}/CMakeCache.txt)
    message(FATAL_ERROR "In-source builds are not allowed, you will now have to delete some files generated by CMake in your source folder. Using the cleanflight/build directory is recommended when building with CMake. ")
endif()

#######################################
# Macros
#######################################
macro(add_coverage_target lcovPath)
    set(COVERAGE_OUTPUTNAME     "coverage")
    set(COVERAGE_OUTPUT_DIR     "${CMAKE_BINARY_DIR}/${COVERAGE_OUTPUTNAME}")
    set(COVERAGE_INFO           "${COVERAGE_OUTPUT_DIR}/coverage.info")
    set(COVERAGE_INFO_CLEANED   "${COVERAGE_INFO}.cleaned")
    set(COVERAGE_TXT            "${COVERAGE_OUTPUT_DIR}/coverage.txt")
    
    add_custom_target(${COVERAGE_OUTPUTNAME}
        DEPENDS junittest
        COMMAND ${CMAKE_COMMAND} -E make_directory ${COVERAGE_OUTPUT_DIR}
        COMMAND ${lcovPath} --directory . --capture --output-file ${COVERAGE_INFO}
        COMMAND ${lcovPath} --remove ${COVERAGE_INFO} 'tests/*' '/usr/*'  'gtest.h' --output-file ${COVERAGE_INFO_CLEANED}
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        COMMENT "Running coverage: lcov")

    # Text-report info
    add_custom_command(TARGET ${COVERAGE_OUTPUTNAME} POST_BUILD
        COMMAND ${lcovPath} --list ${COVERAGE_INFO_CLEANED} > ${COVERAGE_TXT}
        COMMENT "Coverage text-report: ${COVERAGE_TXT}")

    find_program(GENHTML_PATH genhtml)
    if("${GENHTML_PATH}" MATCHES "GENHTML_PATH-NOTFOUND")
        message("-- genhtml is required to enable unit test code coverage html-report.")
    else()
        # Html-report
        add_custom_target(${COVERAGE_OUTPUTNAME}-html
            DEPENDS ${COVERAGE_OUTPUTNAME}
            COMMAND ${GENHTML_PATH} -o ${COVERAGE_OUTPUT_DIR} ${COVERAGE_INFO_CLEANED}
            COMMENT "Running coverage: genhtml")

        # Html-report info
        add_custom_command(TARGET ${COVERAGE_OUTPUTNAME}-html POST_BUILD
            COMMAND ;
            COMMENT "Coverage html-report: ${COVERAGE_OUTPUT_DIR}/index.html")
    endif()
endmacro()

#######################################
# Build
#######################################

# Where to find user code.
get_filename_component(USER_DIR     "${PROJECT_SOURCE_DIR}/../main" ABSOLUTE)

# Add gtest
enable_testing()
get_filename_component(GTEST_DIR    "${PROJECT_SOURCE_DIR}/../../lib/test/gtest" ABSOLUTE)
add_subdirectory(${GTEST_DIR} gtest)
include_directories(SYSTEM ${gtest_SOURCE_DIR}/inc)

# Includes in the test dir which should override the user dir
include_directories(${CMAKE_CURRENT_LIST_DIR}/unit)

# Includes in the user dir
include_directories(${USER_DIR})

# Compiler flags for coverage instrumentation
set(COVERAGE_FLAGS  "--coverage")

# COMMON_FLAGS
set(COMMON_FLAGS "${COMMON_FLAGS} -g")
set(COMMON_FLAGS "${COMMON_FLAGS} -Wall")
set(COMMON_FLAGS "${COMMON_FLAGS} -pthread")
set(COMMON_FLAGS "${COMMON_FLAGS} -Wextra")
set(COMMON_FLAGS "${COMMON_FLAGS} -ggdb3")
set(COMMON_FLAGS "${COMMON_FLAGS} -O0")
set(COMMON_FLAGS "${COMMON_FLAGS} -MMD -MP")

# C_FLAGS
set(CMAKE_C_FLAGS   "${COMMON_FLAGS}")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -std=gnu99")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${COVERAGE_FLAGS}")

# CXX_FLAGS
set(CMAKE_CXX_FLAGS "${COMMON_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COVERAGE_FLAGS}")

# build for unit tests
add_definitions(-DUNIT_TEST)

# enable fast Maths tests
add_definitions(-DFAST_MATH)

# Add libraries for each unit-under-test code
add_subdirectory(uut)

# Add mocks
add_subdirectory(mock)

# Add unit tests
add_subdirectory(unit)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    # Add coverage for GCC
    find_program(LCOV_PATH lcov)
    if("${LCOV_PATH}" MATCHES "LCOV_PATH-NOTFOUND")
        message("-- lcov is required to enable unit test code coverage.")
    else()
        add_coverage_target(${LCOV_PATH})
    endif()
endif()
