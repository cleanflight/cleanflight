# A CMake file for building tests
cmake_minimum_required (VERSION 2.8.3)
set(CMAKE_LEGACY_CYGWIN_WIN32 0) # Remove when CMake >= 2.8.4 is required

set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

project(cleanflight-tests)

# Prevent in-source builds
string(COMPARE EQUAL "${PROJECT_SOURCE_DIR}" "${PROJECT_BINARY_DIR}" isInSourceBuild)
if(isInSourceBuild)
    file(REMOVE_RECURSE ${CMAKE_SOURCE_DIR}/CMakeFiles ${CMAKE_SOURCE_DIR}/CMakeCache.txt)
    message(FATAL_ERROR "In-source builds are not allowed, you will now have to delete some files generated by CMake in your source folder. Using the cleanflight/build directory is recommended when building with CMake. ")
endif()

# Where to find user code.
get_filename_component(USER_DIR     "${PROJECT_SOURCE_DIR}/../main" ABSOLUTE)

# Add gtest
enable_testing()
get_filename_component(GTEST_DIR    "${PROJECT_SOURCE_DIR}/../../lib/test/gtest" ABSOLUTE)
add_subdirectory(${GTEST_DIR} gtest)
include_directories(SYSTEM ${gtest_SOURCE_DIR}/inc)

# Includes in the test dir which should override the user dir
include_directories(${CMAKE_CURRENT_LIST_DIR}/unit)

# Includes in the user dir
include_directories(${USER_DIR})

# Compiler flags for coverage instrumentation
set(GCOV_CC_FLAGS   "-fprofile-arcs -ftest-coverage")
set(GCOV_L_FLAGS    "-lgcov")

# COMMON_FLAGS
set(COMMON_FLAGS "${COMMON_FLAGS} -g")
set(COMMON_FLAGS "${COMMON_FLAGS} -Wall")
set(COMMON_FLAGS "${COMMON_FLAGS} -pthread")
set(COMMON_FLAGS "${COMMON_FLAGS} -Wextra")
set(COMMON_FLAGS "${COMMON_FLAGS} -ggdb3")
set(COMMON_FLAGS "${COMMON_FLAGS} -O0")
set(COMMON_FLAGS "${COMMON_FLAGS} -MMD -MP")

# C_FLAGS
set(CMAKE_C_FLAGS   "${COMMON_FLAGS}")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -std=gnu99")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${GCOV_CC_FLAGS} ${GCOV_L_FLAGS}")

# CXX_FLAGS
set(CMAKE_CXX_FLAGS "${COMMON_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCOV_CC_FLAGS} ${GCOV_L_FLAGS}")

# build for unit tests
add_definitions(-DUNIT_TEST)

# enable fast Maths tests
add_definitions(-DFAST_MATH)

# Add libraries for each unit-under-test code
add_subdirectory(uut)

# Add mocks
add_subdirectory(mock)

# Add unit tests
add_subdirectory(unit)
